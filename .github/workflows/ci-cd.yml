name: CICD Dockerized 

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Using Docker Hub Registry
  # REGISTRY: docker.io

  # Using Google Artifact Registry
  REGISTRY: gcr.io
  # IMAGE_NAME: [GCP_PROJECT_NAME]/[CLOUDRUN_SERVICE_NAME]
  IMAGE_NAME: natours-full/natours-full-site

  # Github Repository Image Name as: <account>/<repo>
  # IMAGE_NAME: ${{ github.repository }}

  # Docker Hub Image Name
  # IMAGE_NAME: claudineisbezerra/natours-full

  # Google Cloud Run Service
  PROJECT_ID: natours-full
  SERVICE: natours-full-site
  REGION: us-central1

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install Cosign
        if: ${{ github.event_name != 'pull_request' && 
            (github.event_name == 'push' && !contains(github.ref, '/heads/master') ) }}
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.13.1'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login into registry ${{ env.REGISTRY }}
        id: log-into-registry
        if: ${{ github.event_name != 'pull_request' && 
            (github.event_name == 'push' && !contains(github.ref, '/heads/master') ) }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          # Docker Hub Registry Auth
          # username: ${{ secrets.DOCKER_USERNAME }}
          # password: ${{ secrets.DOCKER_PASSWORD }}
          # Google Artifact Registry Auth
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}
          logout: true

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
            prefix=
            suffix=
          # set latest tag for default branch
          # set semver (1.x.x) version style
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}

      # Show github metadata (TAGS)
      - name: Show GitHub Tags
        run: echo ${{ steps.meta.outputs.tags }}

      # Step to run tests without pushing Docker Image Created (push: false),
      # targeting only 'build-stage' defined in dockerfile.prod
      - name: Build for testing
        id: build-for-testing
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          file: ./dockerfile.prod
          push: false
          target: build-stage
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Levanta o ambiente - com o propósito de testar - sem travar o terminal (-d)
      - name: Up containers for testing
        id: up-containers-for-testing
        run: docker compose -f docker-compose.prod.yaml up -d

      # Aguarda até que o ambiente esteja no ar. Preciso saber quando o docker estará disponível.
      # Esta Ação está disponível no repositório wait-for
      - name: Waiting environment to be ready
        id: waiting-environment-to-be-ready
        run: wget -qO- https://raw.githubusercontent.com/eficode/wait-for/v2.1.3/wait-for | sh -s -- localhost:3000 -- echo success

      # Uma vez que o ambiente esteja disponível:
      # Executo meus testes no container app_prod (pré compilado nos steps anteriores).
      # Então ao executar docker-compose.prod.yaml novamente, somente o container db_prod será criado.
      # (-T) evita que meu terminal não dê erros na hora de execução dos testes
      # - name: Running tests
      #   run: docker compose -f docker-compose.prod.yaml exec -T app_prod sh -c "npm run test"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push docker image
        id: build-and-push
        uses: docker/build-push-action@v3.2.0
        if: ${{ github.event_name != 'pull_request' && 
            (github.event_name == 'push' && !contains(github.ref, '/heads/master') ) }}
        with:
          context: .
          file: ./dockerfile.prod
          target: runtime-stage
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published docker image
        id: signed-docker-image
        if: ${{ github.event_name != 'pull_request' && 
            (github.event_name == 'push' && !contains(github.ref, '/heads/master') ) }}
        env:
          COSIGN_EXPERIMENTAL: 'true'
        # This step uses the identity token to provision an ephemeral certificate
        # Sign the images with GitHub OIDC Token **not production ready** against the sigstore community Fulcio instance.
        run: echo "${{ steps.build-and-push.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

  cd:
    # Next steps will be executed only if ci was successfully executed and only after PUSH TAG
    needs: ci
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && 
        (github.event_name == 'push' && !contains(github.ref, '/heads/master') ) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Google Artifact Registry Auth
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Deploy to Cloud Run from Google Artifact Registry
      - name: 'Deploy to Cloud Run'
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v1'
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ needs.ci.outputs.tags }}
          env_vars: |
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DATABASE=${{ secrets.DATABASE }}
