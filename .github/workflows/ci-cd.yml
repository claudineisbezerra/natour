name: CICD Dockerize to DockerHub 

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  # IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: claudineisbezerra/natours-full
  SERVICE: nest
  REGION: us-central1

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install Cosign and test presence in path
        uses: sigstore/cosign-installer@main
      - name: Check install!
        run: cosign version

      - name: Install Cosign and test presence in path
        if: github.event_name != 'pull_request'
        # uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        uses: sigstore/cosign-installer@main
        # with:
        #   cosign-release: 'v1.11.0'
        #   cosign-release: 'v1.13.1'
      - name: Check cosign install!
        run: cosign version

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login into registry ${{ env.REGISTRY }}
        id: log-into-registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          logout: true

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Step to run tests without pushing Docker Image Created (push: false),
      # targeting only 'build-stage' defined in Dockerfile.prod
      - name: Build for testing
        id: build-for-testing
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          file: ./Dockerfile.prod
          push: false
          target: build-stage
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Levanta o ambiente - com o propósito de testar - sem travar o terminal (-d)
      - name: Up containers for testing
        id: up-containers-for-testing
        run: docker compose -f docker-compose.prod.yaml up -d

      # Aguarda até que o ambiente esteja no ar. Preciso saber quando o docker estará disponível.
      # Esta Ação está disponível no repositório wait-for
      - name: Waiting environment to be ready
        id: waiting-environment-to-be-ready
        run: wget -qO- https://raw.githubusercontent.com/eficode/wait-for/v2.1.3/wait-for | sh -s -- localhost:3000 -- echo success

      # Uma vez que o ambiente esteja disponível:
      # Executo meus testes no container app_prod (pré compilado nos steps anteriores).
      # Então ao executar docker-compose.prod.yaml novamente, somente o container db_prod será criado.
      # (-T) evita que meu terminal não dê erros na hora de execução dos testes
      # - name: Running tests
      #   run: docker compose -f docker-compose.prod.yaml exec -T app_prod sh -c "npm run test"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        if: ${{ github.event_name != 'pull_request' }}
        with:
          context: .
          file: ./Dockerfile.prod
          target: runtime-stage
          push: true
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published docker image
        id: signed-docker-image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: 'true'
        # This step uses the identity token to provision an ephemeral certificate
        # Sign the images with GitHub OIDC Token **not production ready** against the sigstore community Fulcio instance.
        run: echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
        # run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

  cd:
    needs: ci
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      # - id: 'auth'
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # - name: 'Deploy to Cloud Run'
      #   uses: 'google-github-actions/deploy-cloudrun@v0'
      #   with:
      #     service: ${{ env.SERVICE }}
      #     image: ${{ needs.ci.outputs.tags }}
      #     region: ${{ env.REGION }}
      #     env_vars: DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
      #     env_vars: DATABASE=${{ secrets.DATABASE }}